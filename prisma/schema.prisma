// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Main destination model
model Destination {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique // For dynamic routing
  image       String
  description String
  activities  Activity[]
  createdAt   DateTime   @default(now())
  // updatedAt   DateTime   @updatedAt
}

// Activity model (like Trekking, Rafting, Tour)
model Activity {
  id            String        @id @default(cuid())
  name          String
  slug          String        @unique // For dynamic routing
  image         String
  description   String
  destination   Destination   @relation(fields: [destinationId], references: [id])
  destinationId String
  subactivities Subactivity[]
  packages      Package[]
  createdAt     DateTime      @default(now())
  // updatedAt     DateTime      @updatedAt
}

// Subactivity model (like Camping Trek, Everest Region)
model Subactivity {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique // For dynamic routing
  image       String
  description String
  activity    Activity  @relation(fields: [activityId], references: [id])
  activityId  String
  packages    Package[]
  createdAt   DateTime  @default(now())
  // updatedAt   DateTime  @updatedAt
}

// Package model 
model Package {
  id            String       @id @default(cuid())
  name          String
  slug          String       @unique // For dynamic routing
  description   String
  startingPrice Float
  duration      Int // Duration in days
  difficulty    String // Easy, Moderate, Challenging
  activity      Activity?    @relation(fields: [activityId], references: [id])
  activityId    String?
  subactivity   Subactivity? @relation(fields: [subactivityId], references: [id])
  subactivityId String?
  highlights    String[] // Key highlights of the package
  includedItems String[] // Items included in the package
  excludedItems String[] // Items not included in the package
  createdAt     DateTime     @default(now())
  // updatedAt     DateTime     @updatedAt
}

// Review model
model Review {
  id            String   @id @default(cuid())
  name          String
  email         String
  destination   String
  serviceRating Int
  review        String   @db.Text
  status        Status   @default(APPROVED)
  avatar        String?
  createdAt     DateTime @default(now())
  // updatedAt     DateTime @updatedAt

  @@index([status])
}

// Enum for review status
enum Status {
  PENDING
  APPROVED
  REJECTED
}
